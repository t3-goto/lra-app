version: 2.1
orbs:
  slack: circleci/slack@4.2.1

parameters:
  run_main:
    type: boolean
    default: true
  run_fe_build:
    type: boolean
    default: false
  run_bff_build:
    type: boolean
    default: false
  run_be_build:
    type: boolean
    default: false
  run_fe_deploy:
    type: boolean
    default: true
  run_bff_deploy:
    type: boolean
    default: true
  run_be_deploy:
    type: boolean
    default: true

executors:
  apl_fe_default:
    working_directory: ~/project/apl/fe
    docker:
    - image: cimg/node:12.20
    environment:
      SYSTEM: fe-web
      SOURCE_DIR: apl/fe

  apl_bff_default:
    working_directory: ~/project/apl/bff
    docker:
    - image: cimg/node:12.20
    environment:
      SYSTEM: bff-ap
      SOURCE_DIR: apl/bff

  apl_be_default:
    working_directory: ~/project/apl/be
    docker:
    - image: cimg/node:12.20
    environment:
      SYSTEM: be-ap
      SOURCE_DIR: apl/be

  infra_fe_default:
    docker:
    - image: cimg/node:12.20
    environment:
      SYSTEM: fe-web
      MANIFESTS_DIR: infra/kustomize/fe

  infra_bff_default:
    docker:
    - image: cimg/node:12.20
    environment:
      SYSTEM: bff-ap
      MANIFESTS_DIR: infra/kustomize/bff

  infra_be_default:
    docker:
    - image: cimg/node:12.20
    environment:
      SYSTEM: be-ap
      MANIFESTS_DIR: infra/kustomize/be

commands:
  sparse_checkout:
    description: 'Sparse checkout for sub directories.'
    steps:
    - run:
        name: Sparse checkout
        command: |
          echo "REPO_URL: https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
          echo "SOURCE_DIR: ${SOURCE_DIR}"
          echo "CIRCLE_BRANCH: ${CIRCLE_BRANCH}"
          cd ~/project
          git init
          git config core.sparsecheckout true
          git remote add origin https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git
          echo ${SOURCE_DIR} >.git/info/sparse-checkout
          git pull origin ${CIRCLE_BRANCH}

  # install_deps:
  #   description: 'Install dependencies.'
  #   parameters:
  #     system:
  #       type: enum
  #       enum: ["fe-web", "be-ffp", "be-ap"]
  #   steps:
  #   - when:
  #       condition:
  #         equal: [<< parameter.system >>, "fe-web"]
  #       steps:
  #       - restore_cache:
  #           keys:
  #           - v1-dependencies-fe-web-{{ .Branch }}-{{ checksum "yarn.lock"}}
  #           - v1-dependencies-fe-web-{{ .Branch }}
  #           - v1-dependencies-fe-web-
  #       - run:
  #           name: Yarn install
  #           command: yarn install
  #       - save_cache:
  #           paths:
  #           - node_modules
  #           key: v1-dependencies-fe-web-{{ checksum "yarn.lock"}}
  #       - persist_to_workspace:
  #           root: ./
  #           paths:
  #           - node_modules/*
  #   - when:
  #       condition:
  #         equal: [<< parameter.system >>, "bff-ap"]
  #       steps:
  #       - restore_cache:
  #           keys:
  #           - v1-dependencies-bff-ap-{{ .Branch }}-{{ checksum "yarn.lock"}}
  #           - v1-dependencies-bff-ap-{{ .Branch }}
  #           - v1-dependencies-bff-ap-
  #       - run:
  #           name: Yarn install
  #           command: yarn install
  #       - save_cache:
  #           paths:
  #           - node_modules
  #           key: v1-dependencies-bff-ap-{{ checksum "yarn.lock"}}
  #       - persist_to_workspace:
  #           root: ./
  #           paths:
  #           - node_modules/*
  #   - when:
  #       condition:
  #         equal: [<< parameter.system >>, "be-ap"]
  #       steps:
  #       - restore_cache:
  #           keys:
  #           - v1-dependencies-be-ap-{{ .Branch }}-{{ checksum "yarn.lock"}}
  #           - v1-dependencies-be-ap-{{ .Branch }}
  #           - v1-dependencies-be-ap-
  #       - run:
  #           name: Yarn install
  #           command: yarn install
  #       - save_cache:
  #           paths:
  #           - node_modules
  #           key: v1-dependencies-be-ap-{{ checksum "yarn.lock"}}
  #       - persist_to_workspace:
  #           root: ./
  #           paths:
  #           - node_modules/*

  fe_install_deps:
    description: 'Install dependencies for fe-web.'
    steps:
    - restore_cache:
        keys:
        - v1-dependencies-fe-web-{{ .Branch }}-{{ checksum "yarn.lock"}}
        - v1-dependencies-fe-web-{{ .Branch }}
        - v1-dependencies-fe-web-
    - run:
        name: Yarn install
        command: yarn install
    - save_cache:
        paths:
        - node_modules
        key: v1-dependencies-fe-web-{{ .Branch }}-{{ checksum "yarn.lock"}}
    - persist_to_workspace:
        root: ./
        paths:
        - node_modules/*

  bff_install_deps:
    description: 'Install dependencies for bff-ap.'
    steps:
    - restore_cache:
        keys:
        - v1-dependencies-bff-ap-{{ .Branch }}-{{ checksum "yarn.lock"}}
        - v1-dependencies-bff-ap-{{ .Branch }}
        - v1-dependencies-bff-ap-
    - run:
        name: Yarn install
        command: yarn install
    - save_cache:
        paths:
        - node_modules
        key: v1-dependencies-bff-ap-{{ .Branch }}-{{ checksum "yarn.lock"}}
    - persist_to_workspace:
        root: ./
        paths:
        - node_modules/*

  be_install_deps:
    description: 'Install dependencies for be-ap.'
    steps:
    - restore_cache:
        keys:
        - v1-dependencies-be-ap-{{ .Branch }}-{{ checksum "yarn.lock"}}
        - v1-dependencies-be-ap-{{ .Branch }}
        - v1-dependencies-be-ap-
    - run:
        name: Yarn install
        command: yarn install
    - save_cache:
        paths:
        - node_modules
        key: v1-dependencies-be-ap-{{ .Branch }}-{{ checksum "yarn.lock"}}
    - persist_to_workspace:
        root: ./
        paths:
        - node_modules/*

  eslint:
    description: 'Eslint.'
    steps:
    - attach_workspace:
        at: ./
    - run:
        name: Make report directory
        command: mkdir reports
    - run:
        name: Lint
        command: npx eslint ./src --ext .ts,tsx --format junit --output-file ./reports/eslint/eslint.xml
    - store_test_results:
        path: reports
    - store_artifacts:
        path: reports

  build:
    description: 'Yarn build'
    steps:
    - attach_workspace:
        at: ./
    - run:
        name: Yarn build
        command: yarn build

  docker_build:
    description: 'Docker build'
    steps:
    - setup_remote_docker:
        version: 19.03.13
        docker_layer_caching: false
    - run:
        name: Docker login and setup
        command: |
          # Set BASH_ENV
          echo 'export DOCKER_BUILDKIT=1' >> $BASH_ENV
          echo 'export REGISTORY_URL=${DOCKER_USER}/${SYSTEM}' >> $BASH_ENV
          # echo 'export IMAGE_TAG=latest' >> $ BASH_ENV
          echo 'export IMAGE_TAG=${CIRCLE_SHA1}' >> $ BASH_ENV
          # Login
          docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - run:
        name: Docker build
        command: |
          # Build main
          docker build -t ${REGISTORY_URL}:${CIRCLE_SHA1} --cache-from=${REGISTORY_URL}:build-env --build-arg BUILDKIT_INLINE_CACHE=1  . -f ./docker/Dockerfile
          # Build build-env in parallel
          docker build -t ${REGISTORY_URL}:build-env --target build-env --cache-from ${REGISTORY_URL}:build-env --build-arg BUILDKIT_INLINE_CACHE=1  . -f ./docker/Dockerfile &
          wait
    - run:
        name: Docker push
        command: |
          # Push all in parallel
          docker push ${REGISTORY_URL}:${CIRCLE_SHA1} &
          docker push ${REGISTORY_URL}:build-env &
          wait

  trigger_build_workflow:
    description: 'Git diff and Trigger build workflow'
    steps:
    - checkout
    - run:
        name: Git diff
        command: |
          echo ${CIRCLE_PROJECT_USERNAME}
          echo ${CIRCLE_PROJECT_REPONAME}
          if bash ./.circleci/scripts/is_changed.sh "apl/fe"; then
            echo "apl/fe has been changed"
            echo "export BUILD_FE=true" >> $BASH_ENV
          else
            echo "apl/fe has not been changed"
            echo "export BUILD_FE=false" >> $BASH_ENV
          fi
          if bash ./.circleci/scripts/is_changed.sh "apl/bff"; then
            echo "apl/bff has been changed"
            echo "export BUILD_BFF=true" >> $BASH_ENV
          else
            echo "apl/bff has not been changed"
            echo "export BUILD_BFF=false" >> $BASH_ENV
          fi
          if bash ./.circleci/scripts/is_changed.sh "apl/be"; then
            echo "apl/be has been changed"
            echo "export BUILD_BE=true" >> $BASH_ENV
          else
            echo "apl/be has not been changed"
            echo "export BUILD_BE=false" >> $BASH_ENV
          fi
    - run:
        name: Trigger workflow
        command: |
          printf '
            {
              "branch": "%s",
              "parameters": {
                "run_main": false,
                "run_fe_build": %s,
                "run_bff_build": %s,
                "run_be_build": %s
              }
            }
          ' ${CIRCLE_BRANCH} ${BUILD_FE} ${BUILD_BFF} ${BUILD_BE} | jq > trigger.json
          cat trigger.json
          curl -u ${CIRCLE_TOKEN}: -X POST --header "Content-Type: application/json" -d @trigger.json https://circleci.com/api/v2/project/<< pipeline.project.type >>/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline

  apt_get_update:
    description: 'apt-get update and install wget.'
    steps:
    - run:
        name: apt-get update
        command: sudo apt-get update
    - run:
        name: apt-get install
        command: sudo apt-get install -y wget

  install_kubectl:
    description: 'Install kubectl.'
    steps:
    - run:
        name: Install kubectl
        command: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.3/bin/linux/amd64/kubectl
          sudo mv kubectl /usr/local/bin
          sudo chmod +x /usr/local/bin/kubectl
          kubectl version --client

  install_kustomize:
    description: 'Install kustomize.'
    steps:
    - run:
        name: Install kustomize
        command: |
          wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv3.9.2/kustomize_v3.9.2_linux_amd64.tar.gz
          tar xvzf kustomize_v3.9.2_linux_amd64.tar.gz
          sudo mv kustomize /usr/local/bin
          sudo chmod +x /usr/local/bin/kustomize
          kustomize version

  install_awscli:
    description: 'Install awscli.'
    steps:
    - run:
        name: Install awscli
        command: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

  set_k8s_tools:
    description: 'Set k8s tools.'
    steps:
    - persist_to_workspace:
        root: /usr/local/bin/
        paths:
        - kubectl
        - kustomize
        - aws

  get_k8s_tools:
    description: 'Get k8s tools.'
    steps:
    - attach_workspace:
        at: ./
    - run:
        name: Move k8s tools.
        command: |
          sudo mv kubectl /usr/local/bin
          sudo chmod +x /usr/local/bin/kubectl
          sudo mv kustomize /usr/local/bin
          sudo chmod +x /usr/local/bin/kustomize
          # sudo mv aws /usr/local/bin
          # sudo chmod +x /usr/local/bin/aws
          kubectl version --client
          kustomize version
          # aws --version

  k8s_build_and_deploy:
    description: 'Kustomize build.'
    steps:
    - run:
        name: Setup
        command: |
          # Set BASH_ENV
          echo 'export REGISTORY_URL=${DOCKER_USER}/${SYSTEM}' >> $BASH_ENV
    - run:
        name: Kustomize build
        command: |
          cd ${MANIFESTS_DIR}/overlays/prod
          kustomize edit set image ${REGISTORY_URL}:${CIRCLE_SHA1}
          kustomize build  . > ../../manifests/prod.yml
          cat ../../manifests/prod.yml

jobs:
  fe_install_deps:
    executor:
      name: apl_fe_default
    steps:
    - sparse_checkout
    - fe_install_deps
    # - install_deps:
    #     system: "fe-web"

  bff_install_deps:
    executor:
      name: apl_bff_default
    steps:
    - sparse_checkout
    - bff_install_deps
    # - install_deps:
    #     system: "bff-ap"

  be_install_deps:
    executor:
      name: apl_be_default
    steps:
    - sparse_checkout
    - be_install_deps
    # - install_deps:
    #     system: "be-ap"

  lint:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
    - sparse_checkout
    - eslint

  build:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
    - sparse_checkout
    - build

  build_image:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
    - sparse_checkout
    - docker_build

  notify:
    docker:
    - image: cimg/node:12.20
    steps:
    - run: echo "notify slack."
    - slack/notify:
        event: fail
        template: basic_fail_1
    - slack/notify:
        event: pass
        template: success_tagged_deploy_1

  trigger_build_workflow:
    docker:
    - image: cimg/node:12.20
    steps:
    - trigger_build_workflow

  install_k8s_tools:
    docker:
    - image: cimg/node:12.20
    steps:
    - apt_get_update
    - install_kubectl
    - install_kustomize
    - install_awscli
    - set_k8s_tools

  k8s_build_and_deploy:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
    - checkout
    - get_k8s_tools
    - k8s_build_and_deploy

workflows:
  main:
    when: << pipeline.parameters.run_main >>
    jobs:
    - trigger_build_workflow:
        context: CIRCLE

  fe_build:
    when: << pipeline.parameters.run_fe_build >>
    jobs:
    - fe_install_deps
    - lint:
        e: apl_fe_default
        requires:
        - fe_install_deps
    - build:
        e: apl_fe_default
        requires:
        - fe_install_deps
    - build_image:
        e: apl_fe_default
        requires:
        - fe_install_deps
        context: DOCKER_HUB
    - notify:
        requires:
        - lint
        - build
        - build_image
        context: SLACK_INTEGRATION

  bff_build:
    when: << pipeline.parameters.run_bff_build >>
    jobs:
    - bff_install_deps
    - lint:
        e: apl_bff_default
        requires:
        - bff_install_deps
    - build:
        e: apl_bff_default
        requires:
        - bff_install_deps
    - build_image:
        e: apl_bff_default
        requires:
        - bff_install_deps
        context: DOCKER_HUB
    - notify:
        requires:
        - lint
        - build
        - build_image
        context: SLACK_INTEGRATION

  be_build:
    when: << pipeline.parameters.run_be_build >>
    jobs:
    - be_install_deps
    - lint:
        e: apl_be_default
        requires:
        - be_install_deps
    - build:
        e: apl_be_default
        requires:
        - be_install_deps
    - build_image:
        e: apl_be_default
        requires:
        - be_install_deps
        context: DOCKER_HUB
    - notify:
        requires:
        - lint
        - build
        - build_image
        context: SLACK_INTEGRATION

  fe_deploy:
    when: << pipeline.parameters.run_fe_deploy >>
    jobs:
    - install_k8s_tools
    - k8s_build_and_deploy:
        e: infra_fe_default
        requires:
        - install_k8s_tools
        context: DOCKER_HUB

  bff_deploy:
    when: << pipeline.parameters.run_bff_deploy >>
    jobs:
    - install_k8s_tools
    - k8s_build_and_deploy:
        e: infra_bff_default
        requires:
        - install_k8s_tools
        context: DOCKER_HUB

  be_deploy:
    when: << pipeline.parameters.run_be_deploy >>
    jobs:
    - install_k8s_tools
    - k8s_build_and_deploy:
        e: infra_be_default
        requires:
        - install_k8s_tools
        context: DOCKER_HUB

